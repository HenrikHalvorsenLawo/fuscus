[port]
# Define the path to communicate with this instance of fuscus
path = /dev/fuscus


[sensors]
# Define the sensor one-wire addresses here
# You can find the address of the devices on your system by typing the
# following at a command prompt:
#
# ls /sys/bus/w1/devices/
#
# Make sure to define the correct sensor for fridge, beer and ambient.
# You must specify at least the fridge sensor.
# e.g.
# fridge = 28-000006f02214
# beer = 28-0315535f7bff
# ambient = 28-000006f04264
fridge = 28-031590ed07ff
ambient = 28-0415a1f1ebff


[door]
# Define the door sensor pin here
# The recommended default is on pin 3, open when high (True).
# You can override the pin number, and the logic state which indicates
# the door is open.
# If nothing is specified then it is assumed there is no door switch.
# e.g. pin 3 active high (recommended)
#pin = 3
#open_state = True


[relay]
# Define the relay control pins here
# hot = GPIO pin number for heating relay
# invert_hot = True for active-low relay boards
# cold = GPIO pin number for cooling relay
# invert_cold = True for active-low relay boards
#hot = 16
#invert_hot = True
#cold = 18
#invert_cold = True


[ui]
# Define the local user interface (UI) devices here.
# Current UI devices are the LCD, rotary encoder, and buzzer.
#
# Only the Nokia 5110 with PCD8544 controller is supported,
# or no display.
#
# For no LCD attached:
# lcd = None
#
# For Nokia 5110 display with PCD8544 controller:
# The DC and RST GPIO pins can be specified.  The backlight LED pin
# can be specified, or None for no backlight.  The LCD module also
# uses pins 19, 23 and 24 for SPI communications.  These can not be
# moved and should not be used for other functions.
# lcd = pcd8544
# lcd_DC = 21
# lcd_RST = 22
# lcd_LED = 12
# lcd_contrast = 185
#
#
# For LCD2004 display with i2c controller:
# It is assumed that you are using a 4x20 LCD.
#
# NOTE - If you are using this with a rotary encoder, do not use pin
# 5 for the pushbutton! Read the note below!
#
# lcd_address - The i2c address of the LCD screen. Typically 0x27 for
#         most sainsmart LCDs. Can be discovered by running:
#           i2cdetect -y <busnumber>
#         ...where <busnumber> is the same as "lcd_port" below.
#         (typically 1)
# lcd_port - The i2c bus used for the LCD screen. 0 for the original
#         Raspberry Pi, 1 for all newer models
# lcd_i2c_pin_reverse - Advanced option. Only necessary if your i2c
#         controller uses a non-standard pinout to the LCD module.
#         Read lcd_hardware/lcd2004_i2c.py for more information.
#
#
# lcd = lcd2004_i2c
# lcd_address = 0x27
# lcd_port = 1
# lcd_i2c_pin_reverse = 1

lcd = None

# For the rotary encoder, three pins must be specified.  The
# pushbutton, and the A and B encoder outputs.  It is recommended
# that the pushbutton be on pin 5, as this can be used to boot
# a Pi that is in the shutdown state.
#
# For no rotary encoder attached:
# rotary = None
#
# For typical rotary encoder attached:
# rotary = True
# rotary_PB = 5
# rotary_A = 13
# rotary_B = 11

rotary = None

# For the buzzer, only a single GPIO pin must be specified.
# Currently the buzzer code is not implemented.
#
# For no buzzer present:
# buzzer = None
#
# For a buzzer attached (to GPIO 15, for example):
# buzzer = 15

buzzer = None


[network]
# Define the TCP/IP port number to listen for incoming commands from
# the web interface.  Default is 25518.
# Currently not implemented.
port = 25518

[mqtt]
# Define MQTT topics and parameters
broker = "127.0.0.1"
hot_topic = "cmnd/Tasmota_socket/POWER"
hot_message_on = "ON"
hot_message_off = "OFF"